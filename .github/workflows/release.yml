---
name: Release

"on":
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Is this a pre-release?"
        required: false
        type: boolean
        default: false

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${{ github.event.release.tag_name }}"
            IS_PRERELEASE="${{ github.event.release.prerelease }}"
          fi

          echo "Raw version: $VERSION"

          # Remove 'v' prefix if present
          VERSION_NUMBER=$(echo "$VERSION" | sed 's/^v//')
          echo "Cleaned version: $VERSION_NUMBER"

          # Validate semantic versioning
          if [[ ! "$VERSION_NUMBER" =~ \
            ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION_NUMBER"
            echo "Expected format: x.y.z or x.y.z-prerelease"
            exit 1
          fi

          echo "✅ Version format is valid: $VERSION_NUMBER"
          echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Check changelog entry
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "⚠️ CHANGELOG.md not found, skipping changelog check"
            exit 0
          fi

          VERSION="${{ steps.version.outputs.version }}"
          if grep -q "$VERSION" CHANGELOG.md; then
            echo "✅ Found changelog entry for version $VERSION"
          else
            echo "⚠️ No changelog entry found for version $VERSION"
            echo "Consider adding an entry to CHANGELOG.md"
          fi

  pre-release-checks:
    name: Pre-Release Quality Checks
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        uses: ./.github/actions/setup-python-deps

      - name: Run comprehensive tests
        run: |
          echo "::group::Running Tests"
          pytest --cov=versiontracker --cov-report=xml --cov-report=term -v
          echo "::endgroup::"

      - name: Run linting checks
        run: |
          echo "::group::Code Linting"
          ruff check .
          ruff format --check .
          echo "::endgroup::"

      - name: Run type checking
        run: |
          echo "::group::Type Checking"
          mypy versiontracker
          echo "::endgroup::"

      - name: Run security checks
        run: |
          echo "::group::Security Analysis"
          bandit -c .bandit -r versiontracker/
          safety check
          pip-audit
          echo "::endgroup::"

      - name: Check package metadata
        run: |
          echo "::group::Package Metadata Check"
          python -c "
          import versiontracker
          import sys

          expected_version = '${{ needs.validate-release.outputs.version }}'
          actual_version = versiontracker.__version__

          print(f'Expected version: {expected_version}')
          print(f'Actual version: {actual_version}')

          if actual_version != expected_version:
              print('❌ Version mismatch!')
              print('Please update versiontracker/__init__.py ' +
                    'with the correct version')
              sys.exit(1)
          else:
              print('✅ Version matches!')
          "
          echo "::endgroup::"

  build-and-test:
    name: Build and Test Package
    runs-on: ${{ matrix.os }}
    needs: [validate-release, pre-release-checks]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Build package
        run: |
          python -m build

      - name: Test package installation
        run: |
          # Install from wheel
          pip install dist/*.whl

          # Test basic functionality
          python -c "
          import versiontracker
          print(f'Successfully imported versiontracker ' +
                f'v{versiontracker.__version__}')
          "

          # Test CLI
          versiontracker --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          name: dist-packages
          path: dist/

  publish-package:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    if: |
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch'
    permissions:
      id-token: write
      contents: read
    environment:
      name: release
      url: https://pypi.org/project/versiontracker/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Build package
        run: |
          python -m build

      - name: Verify package integrity
        run: |
          echo "::group::Package Verification"
          twine check dist/*

          # Show package contents
          echo "📦 Package contents:"
          python -m tarfile -l dist/*.tar.gz

          if ls dist/*.whl 1> /dev/null 2>&1; then
            python -c "
            import zipfile
            import glob
            whl_files = glob.glob('dist/*.whl')
            if whl_files:
                with zipfile.ZipFile(whl_files[0], 'r') as z:
                    print('🎯 Wheel contents:')
                    for name in z.namelist():
                        print(f'  {name}')
            "
          fi
          echo "::endgroup::"

      - name: Publish to Test PyPI
        if: needs.validate-release.outputs.is-prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Publish to PyPI
        if: needs.validate-release.outputs.is-prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Wait for package availability
        run: |
          echo "⏳ Waiting for package to be available on PyPI..."
          sleep 60

  verify-release:
    name: Verify Release
    runs-on: ubuntu-latest
    needs: [validate-release, publish-package]
    if: always() && needs.publish-package.result == 'success'
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Test installation from PyPI
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          echo "🔍 Testing installation of versiontracker==$VERSION from PyPI..."

          # Try installing the specific version
          pip install --no-cache-dir "versiontracker==$VERSION"

          # Verify version
          python -c "
          import versiontracker
          import sys

          expected = '$VERSION'
          actual = versiontracker.__version__

          print(f'Expected version: {expected}')
          print(f'Installed version: {actual}')

          if actual != expected:
              print('❌ Version mismatch!')
              sys.exit(1)
          else:
              print('✅ Version verified!')
          "

          # Test CLI functionality
          echo "🧪 Testing CLI functionality..."
          versiontracker --version
          echo "✅ CLI test passed!"

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    if: always()
    needs:
      [
        validate-release,
        pre-release-checks,
        build-and-test,
        publish-package,
        verify-release,
      ]
    steps:
      - name: Generate release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.validate-release.outputs.version }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release**: \
            ${{ needs.validate-release.outputs.is-prerelease }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate-release.result == \
            'success' && '✅ Passed' || '❌ Failed' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.pre-release-checks.result == \
            'success' && '✅ Passed' || '❌ Failed' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result == \
            'success' && '✅ Passed' || '❌ Failed' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Publish | ${{ needs.publish-package.result == \
            'success' && '✅ Passed' || '❌ Failed' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Verification | ${{ needs.verify-release.result == \
            'success' && '✅ Passed' || '❌ Failed' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.publish-package.result }}" == "success" && \
               "${{ needs.verify-release.result }}" == "success" ]]; then
            echo "🎉 **Release completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The package is now available on PyPI:" >> $GITHUB_STEP_SUMMARY
            echo "- **Install**: \`pip install \
              versiontracker==${{ needs.validate-release.outputs.version }}\`" \
            >> $GITHUB_STEP_SUMMARY
            echo "- **PyPI**: https://pypi.org/project/versiontracker/" \
              >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Release encountered issues. \
              Please check the failed stages above.**" \
              >> $GITHUB_STEP_SUMMARY
          fi
