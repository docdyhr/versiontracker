---
name: Security

"on":
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
  schedule:
    # Run comprehensive security checks daily at 6 AM UTC
    - cron: "0 6 * * *"

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        uses: ./.github/actions/setup-python-deps

      - name: Install additional security tools
        run: |
          # Install security tools that may have compatibility issues
          # Try to install safety with fallback
          pip install pip-audit bandit[toml] || true
          echo "Attempting to install safety..."
          pip install safety || \
            echo "Safety installation failed, will skip safety checks"

      - name: Run Bandit security linter
        run: |
          echo "::group::Bandit Security Analysis"
          bandit -c .bandit -r versiontracker/ \
            -f json -o bandit-report.json || true
          bandit -c .bandit -r versiontracker/ -ll || true
          echo "::endgroup::"

      - name: Run Safety to check dependencies
        run: |
          echo "::group::Safety Dependency Check"
          if command -v safety >/dev/null 2>&1; then
            safety check --json > safety-report.json || true
            safety check || true
          else
            echo "Safety is temporarily disabled due to psutil 7.0.0 incompatibility"
            echo "{\"vulnerabilities\": []}" > safety-report.json
          fi
          echo "::endgroup::"

      - name: Run pip-audit for dependency vulnerabilities
        run: |
          echo "::group::Pip-Audit Vulnerability Check"
          pip-audit --format=json --output=pip-audit-report.json || true
          # Run pip-audit but don't fail on setuptools vulnerabilities (system dependency)
          pip-audit || \
            echo "Pip-audit found vulnerabilities in system dependencies"
          echo "::endgroup::"

      - name: Set up TruffleHog scan parameters
        id: trufflehog_params
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, use the actual base and head commits
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"

            # If base and head are the same (shouldn't happen), skip scan
            if [ "$BASE" == "$HEAD" ]; then
              echo "::warning::Base and head commits are the same. Skipping TruffleHog scan."
              echo "skip_scan=true" >> $GITHUB_OUTPUT
            else
              echo "base=$BASE" >> $GITHUB_OUTPUT
              echo "head=$HEAD" >> $GITHUB_OUTPUT
              echo "skip_scan=false" >> $GITHUB_OUTPUT
            fi
          else
            # For push events, scan the commit range
            if [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              echo "base=${{ github.event.before }}" >> $GITHUB_OUTPUT
              echo "head=${{ github.sha }}" >> $GITHUB_OUTPUT
              echo "skip_scan=false" >> $GITHUB_OUTPUT
            else
              # For initial commits or when before is not available
              echo "::warning::No previous commit to compare. Skipping TruffleHog scan."
              echo "skip_scan=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Check for secrets with TruffleHog
        if: steps.trufflehog_params.outputs.skip_scan != 'true'
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ${{ steps.trufflehog_params.outputs.base }}
          head: ${{ steps.trufflehog_params.outputs.head }}
          extra_args: --debug --only-verified

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
            security-summary.md
          retention-days: 30

      - name: Create comprehensive security report
        run: |
          echo "# Security Analysis Report" > security-summary.md
          echo "**Generated**: $(date -u)" >> security-summary.md
          echo "**Repository**: ${{ github.repository }}" >> security-summary.md
          echo "**Commit**: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Bandit Security Scan" >> security-summary.md
          echo '```' >> security-summary.md
          bandit -r versiontracker/ -f txt >> security-summary.md || true
          echo '```' >> security-summary.md
          echo "" >> security-summary.md

          echo "## Safety Check Results" >> security-summary.md
          echo '```' >> security-summary.md
          if command -v safety >/dev/null 2>&1; then
            safety check --short-report >> security-summary.md || true
          else
            echo "Safety disabled due to psutil 7.0.0 incompatibility." \
            >> security-summary.md
          fi
          echo '```' >> security-summary.md
          echo "" >> security-summary.md

          echo "## Pip-Audit Results" >> security-summary.md
          echo '```' >> security-summary.md
          pip-audit --format=columns >> security-summary.md || true
          echo '```' >> security-summary.md

      - name: Create security summary
        if: always()
        run: |
          echo "## Security Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count findings if reports exist
          if [ -f bandit-report.json ]; then
            BANDIT_ISSUES=$(jq '.results | length' bandit-report.json \
              2>/dev/null || echo "0")
            echo "- **Bandit Issues**: $BANDIT_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f safety-report.json ]; then
            SAFETY_ISSUES=$(jq '.vulnerabilities | length' \
              safety-report.json 2>/dev/null || echo "0")
            echo "- **Safety Vulnerabilities**: $SAFETY_ISSUES" \
              >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f pip-audit-report.json ]; then
            AUDIT_ISSUES=$(jq '.vulnerabilities | length' \
              pip-audit-report.json 2>/dev/null || echo "0")
            echo "- **Pip-Audit Vulnerabilities**: $AUDIT_ISSUES" \
              >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä Security scan completed. Check artifacts for reports." \
              >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-summary.md')) {
              const report = fs.readFileSync('security-summary.md', 'utf8');
              try {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## üîí Security Analysis Report\n\n${report}`
                });
              } catch (error) {
                console.log('Could not post comment:', error.message);
                // Don't fail the workflow if we can't comment
              }
            }

      - name: Fail on critical vulnerabilities
        run: |
          if [ -f security-summary.md ]; then
            if grep -q "CRITICAL\|HIGH" security-summary.md; then
              echo "‚ùå Critical or high severity vulnerabilities found!"
              echo "Please review the security report and update dependencies."
              exit 1
            else
              echo "‚úÖ No critical vulnerabilities found."
            fi
          fi
