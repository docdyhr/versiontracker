---
name: CI

"on":
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          allow-prereleases: ${{ matrix.python-version == '3.13' }}

      - name: Install dependencies
        uses: ./.github/actions/setup-python-deps

      - name: Install Python 3.13 specific requirements
        if: matrix.python-version == '3.13'
        run: |
          pip install -r requirements-py313.txt || \
            echo "Python 3.13 requirements failed, using fallback"

      - name: Run Python 3.13 compatibility test
        if: matrix.python-version == '3.13'
        run: |
          python scripts/test_python313.py

      - name: Install from lock files (if available)
        run: |
          # Use lock files for reproducible builds when available
          if [ -f requirements-prod.lock ]; then
            echo "Installing from requirements-prod.lock"
            pip install -r requirements-prod.lock
          elif [ -f requirements.txt ]; then
            echo "Installing from requirements.txt (lock file not found)"
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.lock ]; then
            echo "Installing from requirements-dev.lock"
            pip install -r requirements-dev.lock
          elif [ -f requirements-dev.txt ]; then
            echo "Installing from requirements-dev.txt (lock file not found)"
            pip install -r requirements-dev.txt
          fi

      - name: Run platform compatibility tests
        run: |
          echo "::group::Platform Compatibility Tests"
          pytest tests/test_platform_compatibility.py -v --tb=short \
            --cov-fail-under=0 || echo "Platform tests failed (non-critical)"
          echo "::endgroup::"
        continue-on-error: true

      - name: Run auto-update feature tests
        run: |
          echo "::group::Auto-Update Feature Tests"
          pytest tests/test_auto_update_*.py \
            tests/test_enhanced_auto_update_handlers.py -v --tb=short \
            --timeout=300 --maxfail=10 || \
            echo "Auto-update tests failed (non-critical)"
          echo "::endgroup::"
        continue-on-error: true

      - name: Run all tests
        run: |
          echo "::group::Main Test Suite"
          # Note: pytest-timeout is installed via requirements-dev.txt
          set +e
          PYTEST_CMD=(pytest --maxfail=5 --tb=short --timeout=300 --cov=versiontracker \
            --cov-report=xml --cov-report=term-missing)
          "${PYTEST_CMD[@]}"
          EC=$?
          if [ "$EC" -eq 2 ]; then
            echo "Detected pytest KeyboardInterrupt (exit 2). Retrying once..."
            "${PYTEST_CMD[@]}"
            EC=$?
          fi
          echo "::endgroup::"
          exit $EC
        continue-on-error: false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Build package
        run: |
          python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
