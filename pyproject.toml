[build-system]
requires = ["setuptools>=42", "wheel", "build>=0.7.0"]
build-backend = "setuptools.build_meta"

[project]
# This section is defined by PEP 621
name = "versiontracker"
dynamic = ["version"]
description = "CLI versiontracker and update tool for macOS"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [{ name = "docdyhr", email = "thomas@dyhr.com" }]
keywords = ["versiontracker", "macos", "update", "homebrew"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "fuzzywuzzy>=0.18.0",
    "rapidfuzz>=3.0.0",
    "tqdm>=4.66.0",
    "PyYAML>=6.0",
    "termcolor>=2.3.0",
    "tabulate>=0.9.0",
    "psutil>=5.9.5",
    "aiohttp>=3.8.0",
]

[project.urls]
Homepage = "https://github.com/docdyhr/versiontracker"
"Bug Tracker" = "https://github.com/docdyhr/versiontracker/issues"
Documentation = "https://github.com/docdyhr/versiontracker"
"Source Code" = "https://github.com/docdyhr/versiontracker"
Changelog = "https://github.com/docdyhr/versiontracker/blob/main/CHANGELOG.md"

[project.scripts]
versiontracker = "versiontracker.__main__:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["versiontracker*"]
exclude = [
    "images*",
    "tmp_test*",
    "tests*",
    "docs*",
    "htmlcov*",
    "tools*",
    "handlers*",
    "node_modules*",
]

[tool.ruff]
# Define the target Python version.
# We support Python 3.10 and later.
target-version = "py310"

# Exclude the venv directory.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = ["E", "F", "I"]
# E203: whitespace before ':' (handled by black)
# E501: line too long (AI assistants often generate longer lines for readability)
# E402: module level import not at top (common in test files with conditional imports)
# F401: unused import (keeping old config)
# F811: redefinition of unused name (keeping old config)
# F821: undefined name (keeping old config)
# F841: assigned but unused variable (keeping old config)
ignore = ["E203", "E501", "E402", "F401", "F811", "F821", "F841"]

# Allow autofix for all enabled rules (when --fix)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["versiontracker"]

[tool.ruff.format]
# Use black formatting style
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
color_output = true
error_summary = true
pretty = true
follow_imports = "silent"
namespace_packages = true
explicit_package_bases = true
ignore_missing_imports = true
cache_dir = ".mypy_cache"
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "fuzzywuzzy.*",
    "Levenshtein.*",
    "rapidfuzz.*",
    "tqdm.*",
    "yaml.*",
    "tabulate.*",
    "termcolor.*",
    "psutil.*",
    "aiohttp.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
disable_error_code = ["type-arg", "attr-defined", "no-untyped-def", "misc"]

[[tool.mypy.overrides]]
module = "versiontracker.__init__"
# Suppress warnings about __all__ items not being present due to lazy loading
disable_error_code = ["attr-defined", "name-defined"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--cov=versiontracker",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-branch",
    "--cov-fail-under=60",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--maxfail=5",
    "--durations=10",
    "--junitxml=pytest.xml",
    "--timeout=300",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "network: marks tests that require network access",
    "asyncio: marks tests that use asyncio",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests for basic functionality",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    "ignore::UserWarning:fuzzywuzzy.*",
    "ignore::UserWarning:requests.*",
    "error::UserWarning:versiontracker.*",
]
minversion = "7.0"
timeout = 300
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Coverage configuration
[tool.coverage.run]
source = ["versiontracker"]
omit = [
    "versiontracker/__main__.py",
    "versiontracker/test_*.py",
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/virtualenv/*",
    "*/.pytest_cache/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "__pycache__", ".pytest_cache"]
skips = [
    "B101", # assert_used
    "B110", # try_except_pass - used for non-critical error handling
    "B404", # subprocess module import - required for system command execution
    "B602", # subprocess with shell=True - intentional for homebrew command execution
    "B603", # subprocess without shell - safe usage with controlled inputs
    "B607", # partial path - brew command is expected to be in PATH
    "B608", # hardcoded_sql_expressions - false positive in cache error messages
]
severity = "medium"
confidence = "medium"
